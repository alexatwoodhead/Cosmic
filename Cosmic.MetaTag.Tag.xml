<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Cosmic.MetaTag.Tag">
<Description><![CDATA[
<pre>
Copyright (c) 2011 Alex Woodhead

Permission is hereby granted, free of charge, to any person obtaining a copy of this software
and associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</pre>
The base class for authoring new MetaTags to decorate source code
Override parameters to control where a Tag maybe used]]></Description>
<Super>%Persistent</Super>
<TimeCreated>62280,58968.329048</TimeCreated>

<Parameter name="DecorateClasses">
<Description>
Override Parameter with value "1" to allow to be used in the Description of a class</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="DecorateMethods">
<Description>
Override Parameter with value "1" to allow to be used in the Description of a method</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="DecorateSource">
<Description>
Override Parameter with value "1" to allow to be used in the Source of a method</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="DecorateProperties">
<Description>
Override Parameter with value "1" to allow to be used in the Description of a property</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="DecorateParameters">
<Description>
Override Parameter with value "1" to allow to be used in the Description of a parameter</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="DecorateXDatas">
<Description>
Override Parameter with value "1" to allow to be used in the Description of an xdata</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="IsMultiUse">
<Description>
Override Parameter with value "1" to allow to be used multiple times in the same Description text</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="IsInitAll">
<Description><![CDATA[
When the value is "1" - call the generic "InitAll" regardless of the number or types of argument<br/>
When the value is "0" (the default) - call the specific "InitXXX" method that relates to the number
and type of argument.<br/>]]></Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Property name="CosmicClass">
<Type>Cosmic.MetaTag.NameToken</Type>
<Required>1</Required>
</Property>

<Property name="CosmicClassOnly">
<Description><![CDATA[
All Tags will be associated with a given classname<br/>
This property distinguishes whether a Tag is present in the
description field of a ClassDefinition only (value 1) or
whether the Tag is present againts a method/property/parameter/xdata description]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="CosmicClassType">
<Description>
The tag dictionary hold references for both compiled classes and class definitions</Description>
<Type>Cosmic.MetaTag.ClassType</Type>
</Property>

<Property name="CosmicIsAbstract">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="CosmicLineNumber">
<Description>
The line number of a description property that this tag occupies</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="CosmicMethod">
<Description>
The name of the method hosting the tag definitions. (If applicable)</Description>
<Type>Cosmic.MetaTag.NameToken</Type>
</Property>

<Property name="CosmicIsClassMethod">
<Type>%Boolean</Type>
</Property>

<Property name="CosmicIsMethodSource">
<Description><![CDATA[
Flag to indicate whether a tag definition is located within:<ul>
<li>the source code of a method</li>
<li>in the description of a method<li></ul>]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="CosmicProperty">
<Description>
The name of the property hosting the tag definitions. (If applicable)</Description>
<Type>Cosmic.MetaTag.NameToken</Type>
</Property>

<Property name="CosmicParameter">
<Description>
The name of the parameter hosting the tag definitions. (If applicable)</Description>
<Type>Cosmic.MetaTag.NameToken</Type>
</Property>

<Property name="CosmicXData">
<Description>
The name of the xdata hosting the tag definitions. (If applicable)</Description>
<Type>Cosmic.MetaTag.NameToken</Type>
</Property>

<Property name="Name">
<Description>
Pre-Indexed utility property for reuse by any subclasses of Tag</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Index name="iCosmicClass">
<Type>bitmap</Type>
<Properties>CosmicClassType:Exact,CosmicClass:Exact</Properties>
</Index>

<Index name="iCosmicClassOnly">
<Type>bitmap</Type>
<Properties>CosmicClassType:Exact,CosmicClassOnly</Properties>
</Index>

<Index name="iCosmicMethod">
<Type>bitmap</Type>
<Properties>CosmicClassType:Exact,CosmicMethod:Exact</Properties>
</Index>

<Index name="iCosmicIsMethodSource">
<Type>bitmap</Type>
<Properties>CosmicClassType:Exact,CosmicIsMethodSource</Properties>
</Index>

<Index name="iCosmicProperty">
<Type>bitmap</Type>
<Properties>CosmicClassType:Exact,CosmicProperty:Exact</Properties>
</Index>

<Index name="iCosmicParameter">
<Type>bitmap</Type>
<Properties>CosmicClassType:Exact,CosmicParameter:Exact</Properties>
</Index>

<Index name="iCosmicXData">
<Type>bitmap</Type>
<Properties>CosmicClassType:Exact,CosmicXData:Exact</Properties>
</Index>

<Index name="iName">
<Type>bitmap</Type>
<Properties>CosmicClassType:Exact,Name:Exact</Properties>
</Index>

<Method name="IsInitAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#IsInitAll
]]></Implementation>
</Method>

<Method name="IsDecorateClass">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#DecorateClasses
]]></Implementation>
</Method>

<Method name="IsDecorateMethod">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#DecorateMethods
]]></Implementation>
</Method>

<Method name="IsDecorateSource">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#DecorateSource
]]></Implementation>
</Method>

<Method name="IsDecorateProperties">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#DecorateProperties
]]></Implementation>
</Method>

<Method name="IsDecorateParameters">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#DecorateParameters
]]></Implementation>
</Method>

<Method name="IsDecorateXDatas">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#DecorateXDatas
]]></Implementation>
</Method>

<Method name="IsMultiUse">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#IsMultiUse
]]></Implementation>
</Method>

<Method name="ValidateForTags">
<Description>
Internal method used to check to see whether a correctly formated Tag is discerned</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>source:%String,sc:%Status,metascope</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Quit $$$OK
	// Looking for sequence: /// [Name()]
	set err=0
	set exit=0
	set stage=0
	set pos=0
	set len=$Length(source)
	// Ignore leading white space
	for {
		quit:pos=len
		set pos=pos+1
		set char=$E(source,pos)
		if $C(9,10,11,12,13,32,133,160,5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288)[char continue
		if char="[" set stage=1 quit
		set exit=1 quit
	}
	// Other character data found before "[". This is not a Tag
	if exit quit 0
	// leading "[" charcter not found in content
	if stage'=1 quit 0
	// Ignore leading white space
	for {
		quit:pos=len
		set pos=pos+1
		set char=$E(source,pos)
		if $C(9,10,11,12,13,32,133,160,5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288)[char continue
		if char?1A set stage=2 quit
		set exit=1 quit
	}
	// Other character data found before name token
	// TODO - set status error
	if exit quit 0
	// Name token not found
	if statge'=2 quit 0
	set tmppos=pos
	for {
		quit:pos=len
		set pos=pos+1
		set char=$E(source,pos)
		if $C(9,10,11,12,13,32,133,160,5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288)[char continue
		if char'?1(1A,1N,1".") set stage=3 quit
	}
	if char'="(" quit 0
	// TODO - set status error
	
	set Tagname=$E(source,tmppos,pos)
	
	// Check that the Tag name provided is in the format of a classname
	// or in a fully qualified classname (ie: including package)
	// TODO - set status error?
	if Tagname'?1A.AN.(1"."1A.AN) quit 0
	
	set found=0
	// If the Tag name is a fully qualified pattern
	// check to see that it exists in the %Dictionary
	if Tagname?1A.AN1.(1"."1A.AN)
	{
		if ##class(%Dictionary.CompiledClass).%Exists(Tagname)
		{
			set found=1
		}
	} else {
	
		// Check whether the token name is equal to a fully qualified class name
		// or can be resolved to a class name via the tagscope collection
		set package=""
		for {
			set package=$Order(metascope(package))
			quit:package=""
			set qualified=package_"."_Tagname
			if ##class(%Dictionary.CompiledClass).%Exists(qualified)
			{
				set found=1
				set Tagname=qualified
				quit
			}
			continue
		}
		
		
	}
	if found=0 {
		// TODO raise error because the TagClass has not been found
		Quit 0
	}
	set found=0
	// Check to see whether Tagname is really a subclass of MetaTag
	s rs=##class(%ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")
	s sc=rs.Execute("ReStart.MetaTag")
	while (rs.Next())
	{
		if rs.Get("Name")=Tagname
		{
			set found=1
			quit	
		}
	}
	if found=0
	{
		// TODO - error / status TagName class does not extnd MetaTag
		
	}
	
	// From this point onward we should raise tag malformed exceptions
	
	// Process arguments
	if $E(source,pos+1)'=")"
	{
		
	} else {
		
		//next character is ")" - outside parenthesis
	  	set stage=10
	}
	
	// Not encounterd ")" character
	if stage'=10
	{
		// TODO malformed error
		Quit 0	
	}
	
	if $E(source,pos+1)'="]"
	{
		
	} else {
		set stage=11	
	}
	
	//next character maybe be ")" - outside parenthesis
	// next whitespace
	// next character "]"
	
	// not really interested in the rest of the content on a source line
	
	
	Quit 1  // Tag was found
]]></Implementation>
</Method>

<Method name="InitNamedParams">
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>params...</FormalSpec>
<Implementation><![CDATA[
	do %code.WriteLine(" if params#2'=0 {")
	do %code.WriteLine("    throw ##class(ReStart.MetaTag.Exception).InvalidNameParameters(""Odd number of parameters supplied to Tag constructor"","""_%class.Name_""")")
	do %code.WriteLine(" }")
	
	// Get a list of properties
	#dim propt as %ListOfObjectsWithClassName
	set count=%class.Properties.Count()
	W !,"Number of properties=",count
	
	do %code.WriteLine(" for i=1:2:params {")
	set key=""
	set count=0
	// TODO - Known Limitation is that the properties collection only resolves
	//        properties that are directly attached to this class and does not
	//        "import" property names from superclasses.
	for {
		#dim property as %Dictionary.PropertyDefinition
		set property=%class.Properties.GetNext(.key)
		quit:key=""
		set count=count+1
		if (count=1)
		{
			do %code.WriteLine("   if (params(i)="""_property.Name_""") {")
			do %code.WriteLine("     set .."_property.Name_"=params(i+1)")
			do %code.WriteLine("     continue")
			do %code.WriteLine("   }")
		}
		else {
			do %code.WriteLine("   elseif (params(i)="""_property.Name_""") {")
			do %code.WriteLine("     set .."_property.Name_"=params(i+1)")
			do %code.WriteLine("     continue")
			do %code.WriteLine("   }")
		}
		
	}
	if (count>0)
	{
		do %code.WriteLine("   else {")
		do %code.WriteLine("     throw ##class(ReStart.MetaTag.Exception).InvalidNameParameters(""Unknown Tag property name: ""_params(i)_"", supplied to Tag constructor"","""_%class.Name_""")")
		do %code.WriteLine("   }")
	} else {
		do %code.WriteLine("     throw ##class(ReStart.MetaTag.Exception).InvalidNameParameters(""Unknown Tag property name: ""_params(i)_"", supplied to Tag constructor"","""_%class.Name_""")")
	}
	
	do %code.WriteLine(" }")
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="InitAll">
<Description><![CDATA[
Invoked constructor has one or more arguments of type String, Boolean or Number<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName("MyValue1")]
</EXAMPLE>]]></Description>
<FormalSpec>params...</FormalSpec>
<Implementation><![CDATA[	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitS">
<Description><![CDATA[
Invoked constructor has one string argument<br/>
Utility implementation for sub-classes of Cosmic.MetaTag.Tag.
Assigns the Name property of the Tag.
Override to implement specific behaviour
<EXAMPLE>
/// [TagName("MyValue1")]
</EXAMPLE>]]></Description>
<FormalSpec>name:%String</FormalSpec>
<Implementation><![CDATA[
	Set ..Name=name
	Quit
]]></Implementation>
</Method>

<Method name="InitSS">
<Description><![CDATA[
Invoked constructor has two string arguments<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName("MyValue1","MyValue2")]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%String,arg2:%String</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyStringProperty1=arg1
	// Set ..MyStringProperty2=arg1
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitB">
<Description><![CDATA[
Invoked constructor has one boolean argument<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName(true)]
/// [TagName(True)]
/// [TagName(false)]
/// [TagName(False)]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%Boolean</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyBooleanProperty=arg1
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitBB">
<Description><![CDATA[
Invoked constructor has one boolean argument<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName(true,false)]
/// [TagName(True,False)]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%Boolean,arg2:%Boolean</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyBooleanProperty1=arg1
	// Set ..MyBooleanProperty2=arg2
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitSB">
<Description><![CDATA[
Invoked constructor has one string argument and one boolean argument<br/>
Argument order is significant<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName("MyValue1",true)]
/// [TagName("MyValue1",True)]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%String,arg2:%Boolean</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyStringProperty=arg1
	// Set ..MyBooleanProperty=arg2
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitBS">
<Description><![CDATA[
Invoked constructor has one boolean argument and one string argument.<br/>
Argument order is significant<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName(true,"MyValue1")]
/// [TagName(True,"MyValue1")]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%Boolean,arg2:%String</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyBooleanProperty=arg1
	// Set ..MyStringProperty=arg2
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitN">
<Description><![CDATA[
Invoked constructor has one numeric argument<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName(10.15)]
</EXAMPLE>]]></Description>
<FormalSpec>arg:%Numeric</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyNumericProperty=arg1
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitNN">
<Description><![CDATA[
Invoked constructor has two numeric arguments.<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName(10.15)]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%Numeric,arg2:%Numeric</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyNumericProperty1=arg1
	// Set ..MyNumericProperty2=arg2
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitSN">
<Description><![CDATA[
Invoked constructor has one string argument and one numeric argument<br/>
Argument order is significant<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName("MyValue1",10.15)]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%String,arg2:%Numeric</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyStringProperty=arg1
	// Set ..MyNumericProperty=arg2
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitNS">
<Description><![CDATA[
Invoked constructor has one numeric argument and one string argument<br/>
Argument order is significant<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName("MyValue1",10.15)]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%Numeric,arg2:%String</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyNumericProperty=arg1
	// Set ..MyStringProperty=arg2
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitNB">
<Description><![CDATA[
Invoked constructor has one numeric argument and one boolean argument<br/>
Argument order is significant<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName(10.15,True)]
/// [TagName(10.15,true)]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%Numeric,arg2:%Boolean</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyNumericProperty=arg1
	// Set ..MyBooleanProperty=arg2
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Method name="InitBN">
<Description><![CDATA[
Invoked constructor has one boolean argument and one numeric argument.<br/>
Argument order is significant<br/>
Override to implement specific behaviour
<EXAMPLE>
/// [TagName(True,10.15)]
/// [TagName(true,10.15)]
</EXAMPLE>]]></Description>
<FormalSpec>arg1:%Boolean,arg2:%Numeric</FormalSpec>
<Implementation><![CDATA[
	// Set ..MyBooleanProperty=arg1
	// Set ..MyNumericProperty=arg2
	Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>

<Query name="TagsOnClass">
<Type>%SQLQuery</Type>
<FormalSpec>classname:NameToken,classType:ClassType="cc"</FormalSpec>
<SqlQuery> -- Relative cost = 755.11 
 -- Read bitmap index Cosmic_MetaTag.Tag.Classes, using the given ClassType and ClassName, and looping on ID.
 --
 -- For each row:
 --   Output the row
SELECT %ID FROM Tag
 WHERE (CosmicClassType = :classType AND CosmicClass = :classname)</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="TagsOnClassMethod">
<Type>%SQLQuery</Type>
<FormalSpec>classname:NameToken,methodname:NameToken,classType:ClassType="cc"</FormalSpec>
<SqlQuery> -- Relative cost = 201.94 
 -- Read bitmap index Cosmic_MetaTag.Tag.ClassWithMethodSources, using the given ClassType, ClassName, and MethodName, and looping on ID.
 --
 -- For each row:
 --   Output the row.
SELECT %ID FROM Tag
 WHERE (CosmicClassType = :classType AND CosmicClass = :classname and CosmicMethod = :methodname)</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="TagsOnClassMethodSource">
<Type>%SQLQuery</Type>
<FormalSpec>classname:NameToken,methodname:NameToken,classType:ClassType="cc"</FormalSpec>
<SqlQuery> -- Relative cost = 201.94 
 -- Read bitmap index Cosmic_MetaTag.Tag.ClassWithMethodSources, using the given ClassType, ClassName, and MethodSourceName, and looping on ID.
 --
 -- For each row:
 --   Output the row.
SELECT %ID FROM Tag
 WHERE (CosmicClassType = :classType AND CosmicClass = :classname and CosmicMethod = :methodname and CosmicIsMethodSource=1)</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="TagsOnClassProperty">
<Type>%SQLQuery</Type>
<FormalSpec>classname:NameToken,propertyname:NameToken,classType:ClassType="cc"</FormalSpec>
<SqlQuery> -- Relative cost = 201.94 
 -- Read bitmap index Cosmic_MetaTag.Tag.ClassWithProperties, using the given ClassType, ClassName, and PropertyName, and looping on ID.
 --
 -- For each row:
 --   Output the row. 
SELECT ID FROM Cosmic_MetaTag.Tag
 WHERE (CosmicClassType = :classType AND CosmicClass = :classname AND CosmicProperty=:propertyname)</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="TagsOnClassParameter">
<Type>%SQLQuery</Type>
<FormalSpec>classname:NameToken,parametername:NameToken,classType:ClassType="cc"</FormalSpec>
<SqlQuery> -- Query Plan 
 -- Relative cost = 201.94 
 -- Read bitmap index Cosmic_MetaTag.Tag.ClassWithParameters, using the given ClassType, ClassName, and ParameterName, and looping on ID.
 --
 -- For each row:
 --   Output the row. 
SELECT ID FROM Cosmic_MetaTag.Tag
 WHERE (CosmicClassType = :classType AND CosmicClass = :classname AND CosmicProperty=:parametername)</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="TagsOnClassXData">
<Type>%SQLQuery</Type>
<FormalSpec>classname:NameToken,xdataname:NameToken,classType:ClassType="cc"</FormalSpec>
<SqlQuery> -- Relative cost = 201.94 
 -- Read bitmap index Cosmic_MetaTag.Tag.ClassWithXDatas, using the given ClassType, ClassName, and XDataName, and looping on ID.
 --
 -- For each row:
 --   Output the row.
SELECT ID FROM Cosmic_MetaTag.Tag
 WHERE (CosmicClassType = :classType AND CosmicClass = :classname AND CosmicProperty=:xdataname)</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="ClassesWithName">
<Description><![CDATA[
Query to list Tag Id's found in any description part:<ul>
<li>Class</li>
<li>Property</li>
<li>Parameter</li>
<li>Method</li>
<li>Method Source</li>
<li>XData</li>
</ul>of a ClassDefinition or CompiledClass]]></Description>
<Type>%Query</Type>
<FormalSpec>classType:Cosmic.MetaTag.ClassType,name:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%Integer"/>
</Query>

<Method name="ClassesWithNameExecute">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,classType:Cosmic.MetaTag.ClassType,name:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tablename=$S(%class.SqlTableName'="":%class.SqlTableName,1:$TR($P(%class.Name,".",1,$L(%class.Name,".")-1),".","_")_"."_$P(%class.Name,".",$L(%class.Name,".")))
	do %code.WriteLine(" &SQL(DECLARE ClassesWithNameN CURSOR FOR")
	do %code.WriteLine(" 	SELECT ID,CosmicClass FROM "_tablename)
	do %code.WriteLine("	WHERE CosmicClassType=:classType AND Name=:name)")
	do %code.WriteLine(" &SQL(OPEN ClassesWithNameN)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ClassesWithNameClose">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>ClassesWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(CLOSE ClassesWithNameN)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ClassesWithNameFetch">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>ClassesWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(FETCH ClassesWithNameN INTO :ID,:Class)")
	do %code.WriteLine(" if SQLCODE'=0 set AtEnd=1 Quit $$$OK")
	do %code.WriteLine(" set Row=$LB(ID) Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="ClassesOnlyWithName">
<Description><![CDATA[
Query to list Tag Id's found on a ClassDefinition or CompiledClass
Query to list Tag Id's found only on the description part:<ul>
<li>Class</li>
</ul>of a ClassDefinition or CompiledClass]]></Description>
<Type>%Query</Type>
<FormalSpec>classType:Cosmic.MetaTag.ClassType,name:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%Integer"/>
</Query>

<Method name="ClassesOnlyWithNameExecute">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,classType:Cosmic.MetaTag.ClassType,name:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tablename=$S(%class.SqlTableName'="":%class.SqlTableName,1:$TR($P(%class.Name,".",1,$L(%class.Name,".")-1),".","_")_"."_$P(%class.Name,".",$L(%class.Name,".")))
	do %code.WriteLine(" &SQL(DECLARE ClassesOnlyWithNameN CURSOR FOR")
	do %code.WriteLine(" 	SELECT ID FROM "_tablename)
	do %code.WriteLine("	WHERE CosmicClassType=:classType AND CosmicClassOnly=1 AND Name=:name)")
	do %code.WriteLine(" &SQL(OPEN ClassesOnlyWithNameN)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ClassesOnlyWithNameClose">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>ClassesOnlyWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(CLOSE ClassesOnlyWithNameN)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ClassesOnlyWithNameFetch">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>ClassesOnlyWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(FETCH ClassesOnlyWithNameN INTO :ID)")
	do %code.WriteLine(" if SQLCODE'=0 set AtEnd=1 Quit $$$OK")
	do %code.WriteLine(" set Row=$LB(ID) Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="MethodWithName">
<Description><![CDATA[
Query to list Tag Id's found only on the description part:<ul>
<li>Method</li>
</ul>of a ClassDefinition or CompiledClass]]></Description>
<Type>%Query</Type>
<FormalSpec>classType:Cosmic.MetaTag.ClassType,name:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%Integer"/>
</Query>

<Method name="MethodWithNameExecute">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,classType:Cosmic.MetaTag.ClassType,name:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tablename=$S(%class.SqlTableName'="":%class.SqlTableName,1:$TR($P(%class.Name,".",1,$L(%class.Name,".")-1),".","_")_"."_$P(%class.Name,".",$L(%class.Name,".")))
	do %code.WriteLine(" &SQL(DECLARE MethodWithName CURSOR FOR")
	do %code.WriteLine(" 	SELECT ID FROM "_tablename)
	do %code.WriteLine("	WHERE CosmicClassType=:classType AND CosmicMethod!='' AND Name=:name)")
	do %code.WriteLine(" &SQL(OPEN MethodWithName)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="MethodWithNameClose">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>MethodWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(CLOSE MethodWithName)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="MethodWithNameFetch">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>MethodWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(FETCH MethodWithName INTO :ID)")
	do %code.WriteLine(" if SQLCODE'=0 set AtEnd=1 Quit $$$OK")
	do %code.WriteLine(" set Row=$LB(ID) Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="PropertyWithName">
<Description><![CDATA[
Query to list Tag Id's found only on the description part:<ul>
<li>Property</li>
</ul>of a ClassDefinition or CompiledClass]]></Description>
<Type>%Query</Type>
<FormalSpec>classType:Cosmic.MetaTag.ClassType,name:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%Integer"/>
</Query>

<Method name="PropertyWithNameExecute">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,classType:Cosmic.MetaTag.ClassType,name:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tablename=$S(%class.SqlTableName'="":%class.SqlTableName,1:$TR($P(%class.Name,".",1,$L(%class.Name,".")-1),".","_")_"."_$P(%class.Name,".",$L(%class.Name,".")))
	do %code.WriteLine(" &SQL(DECLARE PropertyWithName CURSOR FOR")
	do %code.WriteLine(" 	SELECT ID FROM "_tablename)
	do %code.WriteLine("	WHERE CosmicClassType=:classType AND CosmicProperty!='' AND Name=:name)")
	do %code.WriteLine(" &SQL(OPEN PropertyWithName)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PropertyWithNameClose">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>PropertyWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(CLOSE PropertyWithName)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PropertyWithNameFetch">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>PropertyWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(FETCH PropertyWithName INTO :ID)")
	do %code.WriteLine(" if SQLCODE'=0 set AtEnd=1 Quit $$$OK")
	do %code.WriteLine(" set Row=$LB(ID) Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="ParameterWithName">
<Description><![CDATA[
Query to list Tag Id's found only on the description part:<ul>
<li>Parameter</li>
</ul>of a ClassDefinition or CompiledClass]]></Description>
<Type>%Query</Type>
<FormalSpec>classType:Cosmic.MetaTag.ClassType,name:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%Integer"/>
</Query>

<Method name="ParameterWithNameExecute">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,classType:Cosmic.MetaTag.ClassType,name:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tablename=$S(%class.SqlTableName'="":%class.SqlTableName,1:$TR($P(%class.Name,".",1,$L(%class.Name,".")-1),".","_")_"."_$P(%class.Name,".",$L(%class.Name,".")))
	do %code.WriteLine(" &SQL(DECLARE ParameterWithName CURSOR FOR")
	do %code.WriteLine(" 	SELECT ID FROM "_tablename)
	do %code.WriteLine("	WHERE CosmicClassType=:classType AND CosmicParameter>0 AND Name=:name)")
	do %code.WriteLine(" &SQL(OPEN ParameterWithName)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ParameterWithNameClose">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>ParameterWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(CLOSE ParameterWithName)")
	do %code.WriteLine(" Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ParameterWithNameFetch">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>ParameterWithNameExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do %code.WriteLine(" &SQL(FETCH ParameterWithName INTO :ID)")
	do %code.WriteLine(" if SQLCODE'=0 set AtEnd=1 Quit $$$OK")
	do %code.WriteLine(" set Row=$LB(ID) Quit $$$OK")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TestClassesWithName">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>name:%String,type="cc"</FormalSpec>
<Implementation><![CDATA[
	do %code.WriteLine(" set rs=##class(%ResultSet).%New()")
	do %code.WriteLine(" set rs.ClassName="""_%class.Name_"""")
	do %code.WriteLine(" set rs.QueryName=""ClassesWithName""")
	do %code.WriteLine(" do rs.Execute(type,name)")
	do %code.WriteLine(" while (rs.Next()) {")
	do %code.WriteLine("   Write !,""ID:"",rs.Get(""ID"")")
	do %code.WriteLine(" }")
	do %code.WriteLine(" do rs.%Close()")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cosmic.MetaTag.TagD</DataLocation>
<DefaultData>TagDefaultData</DefaultData>
<IdLocation>^Cosmic.MetaTag.TagD</IdLocation>
<IndexLocation>^Cosmic.MetaTag.TagI</IndexLocation>
<StreamLocation>^Cosmic.MetaTag.TagS</StreamLocation>
<Data name="TagDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CosmicClass</Value>
</Value>
<Value name="3">
<Value>CosmicClassOnly</Value>
</Value>
<Value name="4">
<Value>CosmicClassType</Value>
</Value>
<Value name="5">
<Value>CosmicIsAbstract</Value>
</Value>
<Value name="6">
<Value>CosmicLineNumber</Value>
</Value>
<Value name="7">
<Value>CosmicMethod</Value>
</Value>
<Value name="8">
<Value>CosmicIsClassMethod</Value>
</Value>
<Value name="9">
<Value>CosmicIsMethodSource</Value>
</Value>
<Value name="10">
<Value>CosmicProperty</Value>
</Value>
<Value name="11">
<Value>CosmicParameter</Value>
</Value>
<Value name="12">
<Value>CosmicXData</Value>
</Value>
<Value name="13">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
